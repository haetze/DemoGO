<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>misc/vim/syntax/go.vim - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/lib/godoc/style.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">window.initFuncs = [];</script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>
<a href="/blog/">Blog</a>

<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
	</div>
</div>


<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Text file misc/vim/syntax/go.vim</h1>




<div id="nav"></div>


<pre><span id="L1" class="ln">     1</span>	&#34; Copyright 2009 The Go Authors. All rights reserved.
<span id="L2" class="ln">     2</span>	&#34; Use of this source code is governed by a BSD-style
<span id="L3" class="ln">     3</span>	&#34; license that can be found in the LICENSE file.
<span id="L4" class="ln">     4</span>	&#34;
<span id="L5" class="ln">     5</span>	&#34; go.vim: Vim syntax file for Go.
<span id="L6" class="ln">     6</span>	&#34;
<span id="L7" class="ln">     7</span>	&#34; Options:
<span id="L8" class="ln">     8</span>	&#34;   There are some options for customizing the highlighting; the recommended
<span id="L9" class="ln">     9</span>	&#34;   settings are the default values, but you can write:
<span id="L10" class="ln">    10</span>	&#34;     let OPTION_NAME = 0
<span id="L11" class="ln">    11</span>	&#34;   in your ~/.vimrc file to disable particular options. You can also write:
<span id="L12" class="ln">    12</span>	&#34;     let OPTION_NAME = 1
<span id="L13" class="ln">    13</span>	&#34;   to enable particular options. At present, all options default to on.
<span id="L14" class="ln">    14</span>	&#34;
<span id="L15" class="ln">    15</span>	&#34;   - go_highlight_array_whitespace_error
<span id="L16" class="ln">    16</span>	&#34;     Highlights white space after &#34;[]&#34;.
<span id="L17" class="ln">    17</span>	&#34;   - go_highlight_chan_whitespace_error
<span id="L18" class="ln">    18</span>	&#34;     Highlights white space around the communications operator that don&#39;t follow
<span id="L19" class="ln">    19</span>	&#34;     the standard style.
<span id="L20" class="ln">    20</span>	&#34;   - go_highlight_extra_types
<span id="L21" class="ln">    21</span>	&#34;     Highlights commonly used library types (io.Reader, etc.).
<span id="L22" class="ln">    22</span>	&#34;   - go_highlight_space_tab_error
<span id="L23" class="ln">    23</span>	&#34;     Highlights instances of tabs following spaces.
<span id="L24" class="ln">    24</span>	&#34;   - go_highlight_trailing_whitespace_error
<span id="L25" class="ln">    25</span>	&#34;     Highlights trailing white space.
<span id="L26" class="ln">    26</span>	
<span id="L27" class="ln">    27</span>	&#34; Quit when a (custom) syntax file was already loaded
<span id="L28" class="ln">    28</span>	if exists(&#34;b:current_syntax&#34;)
<span id="L29" class="ln">    29</span>	  finish
<span id="L30" class="ln">    30</span>	endif
<span id="L31" class="ln">    31</span>	
<span id="L32" class="ln">    32</span>	if !exists(&#34;go_highlight_array_whitespace_error&#34;)
<span id="L33" class="ln">    33</span>	  let go_highlight_array_whitespace_error = 1
<span id="L34" class="ln">    34</span>	endif
<span id="L35" class="ln">    35</span>	if !exists(&#34;go_highlight_chan_whitespace_error&#34;)
<span id="L36" class="ln">    36</span>	  let go_highlight_chan_whitespace_error = 1
<span id="L37" class="ln">    37</span>	endif
<span id="L38" class="ln">    38</span>	if !exists(&#34;go_highlight_extra_types&#34;)
<span id="L39" class="ln">    39</span>	  let go_highlight_extra_types = 1
<span id="L40" class="ln">    40</span>	endif
<span id="L41" class="ln">    41</span>	if !exists(&#34;go_highlight_space_tab_error&#34;)
<span id="L42" class="ln">    42</span>	  let go_highlight_space_tab_error = 1
<span id="L43" class="ln">    43</span>	endif
<span id="L44" class="ln">    44</span>	if !exists(&#34;go_highlight_trailing_whitespace_error&#34;)
<span id="L45" class="ln">    45</span>	  let go_highlight_trailing_whitespace_error = 1
<span id="L46" class="ln">    46</span>	endif
<span id="L47" class="ln">    47</span>	
<span id="L48" class="ln">    48</span>	syn case match
<span id="L49" class="ln">    49</span>	
<span id="L50" class="ln">    50</span>	syn keyword     goDirective         package import
<span id="L51" class="ln">    51</span>	syn keyword     goDeclaration       var const type
<span id="L52" class="ln">    52</span>	syn keyword     goDeclType          struct interface
<span id="L53" class="ln">    53</span>	
<span id="L54" class="ln">    54</span>	hi def link     goDirective         Statement
<span id="L55" class="ln">    55</span>	hi def link     goDeclaration       Keyword
<span id="L56" class="ln">    56</span>	hi def link     goDeclType          Keyword
<span id="L57" class="ln">    57</span>	
<span id="L58" class="ln">    58</span>	&#34; Keywords within functions
<span id="L59" class="ln">    59</span>	syn keyword     goStatement         defer go goto return break continue fallthrough
<span id="L60" class="ln">    60</span>	syn keyword     goConditional       if else switch select
<span id="L61" class="ln">    61</span>	syn keyword     goLabel             case default
<span id="L62" class="ln">    62</span>	syn keyword     goRepeat            for range
<span id="L63" class="ln">    63</span>	
<span id="L64" class="ln">    64</span>	hi def link     goStatement         Statement
<span id="L65" class="ln">    65</span>	hi def link     goConditional       Conditional
<span id="L66" class="ln">    66</span>	hi def link     goLabel             Label
<span id="L67" class="ln">    67</span>	hi def link     goRepeat            Repeat
<span id="L68" class="ln">    68</span>	
<span id="L69" class="ln">    69</span>	&#34; Predefined types
<span id="L70" class="ln">    70</span>	syn keyword     goType              chan map bool string error
<span id="L71" class="ln">    71</span>	syn keyword     goSignedInts        int int8 int16 int32 int64 rune
<span id="L72" class="ln">    72</span>	syn keyword     goUnsignedInts      byte uint uint8 uint16 uint32 uint64 uintptr
<span id="L73" class="ln">    73</span>	syn keyword     goFloats            float32 float64
<span id="L74" class="ln">    74</span>	syn keyword     goComplexes         complex64 complex128
<span id="L75" class="ln">    75</span>	
<span id="L76" class="ln">    76</span>	hi def link     goType              Type
<span id="L77" class="ln">    77</span>	hi def link     goSignedInts        Type
<span id="L78" class="ln">    78</span>	hi def link     goUnsignedInts      Type
<span id="L79" class="ln">    79</span>	hi def link     goFloats            Type
<span id="L80" class="ln">    80</span>	hi def link     goComplexes         Type
<span id="L81" class="ln">    81</span>	
<span id="L82" class="ln">    82</span>	&#34; Treat func specially: it&#39;s a declaration at the start of a line, but a type
<span id="L83" class="ln">    83</span>	&#34; elsewhere. Order matters here.
<span id="L84" class="ln">    84</span>	syn match       goType              /\&lt;func\&gt;/
<span id="L85" class="ln">    85</span>	syn match       goDeclaration       /^func\&gt;/
<span id="L86" class="ln">    86</span>	
<span id="L87" class="ln">    87</span>	&#34; Predefined functions and values
<span id="L88" class="ln">    88</span>	syn keyword     goBuiltins          append cap close complex copy delete imag len
<span id="L89" class="ln">    89</span>	syn keyword     goBuiltins          make new panic print println real recover
<span id="L90" class="ln">    90</span>	syn keyword     goConstants         iota true false nil
<span id="L91" class="ln">    91</span>	
<span id="L92" class="ln">    92</span>	hi def link     goBuiltins          Keyword
<span id="L93" class="ln">    93</span>	hi def link     goConstants         Keyword
<span id="L94" class="ln">    94</span>	
<span id="L95" class="ln">    95</span>	&#34; Comments; their contents
<span id="L96" class="ln">    96</span>	syn keyword     goTodo              contained TODO FIXME XXX BUG
<span id="L97" class="ln">    97</span>	syn cluster     goCommentGroup      contains=goTodo
<span id="L98" class="ln">    98</span>	syn region      goComment           start=&#34;/\*&#34; end=&#34;\*/&#34; contains=@goCommentGroup,@Spell
<span id="L99" class="ln">    99</span>	syn region      goComment           start=&#34;//&#34; end=&#34;$&#34; contains=@goCommentGroup,@Spell
<span id="L100" class="ln">   100</span>	
<span id="L101" class="ln">   101</span>	hi def link     goComment           Comment
<span id="L102" class="ln">   102</span>	hi def link     goTodo              Todo
<span id="L103" class="ln">   103</span>	
<span id="L104" class="ln">   104</span>	&#34; Go escapes
<span id="L105" class="ln">   105</span>	syn match       goEscapeOctal       display contained &#34;\\[0-7]\{3}&#34;
<span id="L106" class="ln">   106</span>	syn match       goEscapeC           display contained +\\[abfnrtv\\&#39;&#34;]+
<span id="L107" class="ln">   107</span>	syn match       goEscapeX           display contained &#34;\\x\x\{2}&#34;
<span id="L108" class="ln">   108</span>	syn match       goEscapeU           display contained &#34;\\u\x\{4}&#34;
<span id="L109" class="ln">   109</span>	syn match       goEscapeBigU        display contained &#34;\\U\x\{8}&#34;
<span id="L110" class="ln">   110</span>	syn match       goEscapeError       display contained +\\[^0-7xuUabfnrtv\\&#39;&#34;]+
<span id="L111" class="ln">   111</span>	
<span id="L112" class="ln">   112</span>	hi def link     goEscapeOctal       goSpecialString
<span id="L113" class="ln">   113</span>	hi def link     goEscapeC           goSpecialString
<span id="L114" class="ln">   114</span>	hi def link     goEscapeX           goSpecialString
<span id="L115" class="ln">   115</span>	hi def link     goEscapeU           goSpecialString
<span id="L116" class="ln">   116</span>	hi def link     goEscapeBigU        goSpecialString
<span id="L117" class="ln">   117</span>	hi def link     goSpecialString     Special
<span id="L118" class="ln">   118</span>	hi def link     goEscapeError       Error
<span id="L119" class="ln">   119</span>	
<span id="L120" class="ln">   120</span>	&#34; Strings and their contents
<span id="L121" class="ln">   121</span>	syn cluster     goStringGroup       contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU,goEscapeError
<span id="L122" class="ln">   122</span>	syn region      goString            start=+&#34;+ skip=+\\\\\|\\&#34;+ end=+&#34;+ contains=@goStringGroup
<span id="L123" class="ln">   123</span>	syn region      goRawString         start=+`+ end=+`+
<span id="L124" class="ln">   124</span>	
<span id="L125" class="ln">   125</span>	hi def link     goString            String
<span id="L126" class="ln">   126</span>	hi def link     goRawString         String
<span id="L127" class="ln">   127</span>	
<span id="L128" class="ln">   128</span>	&#34; Characters; their contents
<span id="L129" class="ln">   129</span>	syn cluster     goCharacterGroup    contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU
<span id="L130" class="ln">   130</span>	syn region      goCharacter         start=+&#39;+ skip=+\\\\\|\\&#39;+ end=+&#39;+ contains=@goCharacterGroup
<span id="L131" class="ln">   131</span>	
<span id="L132" class="ln">   132</span>	hi def link     goCharacter         Character
<span id="L133" class="ln">   133</span>	
<span id="L134" class="ln">   134</span>	&#34; Regions
<span id="L135" class="ln">   135</span>	syn region      goBlock             start=&#34;{&#34; end=&#34;}&#34; transparent fold
<span id="L136" class="ln">   136</span>	syn region      goParen             start=&#39;(&#39; end=&#39;)&#39; transparent
<span id="L137" class="ln">   137</span>	
<span id="L138" class="ln">   138</span>	&#34; Integers
<span id="L139" class="ln">   139</span>	syn match       goDecimalInt        &#34;\&lt;\d\+\([Ee]\d\+\)\?\&gt;&#34;
<span id="L140" class="ln">   140</span>	syn match       goHexadecimalInt    &#34;\&lt;0x\x\+\&gt;&#34;
<span id="L141" class="ln">   141</span>	syn match       goOctalInt          &#34;\&lt;0\o\+\&gt;&#34;
<span id="L142" class="ln">   142</span>	syn match       goOctalError        &#34;\&lt;0\o*[89]\d*\&gt;&#34;
<span id="L143" class="ln">   143</span>	
<span id="L144" class="ln">   144</span>	hi def link     goDecimalInt        Integer
<span id="L145" class="ln">   145</span>	hi def link     goHexadecimalInt    Integer
<span id="L146" class="ln">   146</span>	hi def link     goOctalInt          Integer
<span id="L147" class="ln">   147</span>	hi def link     Integer             Number
<span id="L148" class="ln">   148</span>	
<span id="L149" class="ln">   149</span>	&#34; Floating point
<span id="L150" class="ln">   150</span>	syn match       goFloat             &#34;\&lt;\d\+\.\d*\([Ee][-+]\d\+\)\?\&gt;&#34;
<span id="L151" class="ln">   151</span>	syn match       goFloat             &#34;\&lt;\.\d\+\([Ee][-+]\d\+\)\?\&gt;&#34;
<span id="L152" class="ln">   152</span>	syn match       goFloat             &#34;\&lt;\d\+[Ee][-+]\d\+\&gt;&#34;
<span id="L153" class="ln">   153</span>	
<span id="L154" class="ln">   154</span>	hi def link     goFloat             Float
<span id="L155" class="ln">   155</span>	
<span id="L156" class="ln">   156</span>	&#34; Imaginary literals
<span id="L157" class="ln">   157</span>	syn match       goImaginary         &#34;\&lt;\d\+i\&gt;&#34;
<span id="L158" class="ln">   158</span>	syn match       goImaginary         &#34;\&lt;\d\+\.\d*\([Ee][-+]\d\+\)\?i\&gt;&#34;
<span id="L159" class="ln">   159</span>	syn match       goImaginary         &#34;\&lt;\.\d\+\([Ee][-+]\d\+\)\?i\&gt;&#34;
<span id="L160" class="ln">   160</span>	syn match       goImaginary         &#34;\&lt;\d\+[Ee][-+]\d\+i\&gt;&#34;
<span id="L161" class="ln">   161</span>	
<span id="L162" class="ln">   162</span>	hi def link     goImaginary         Number
<span id="L163" class="ln">   163</span>	
<span id="L164" class="ln">   164</span>	&#34; Spaces after &#34;[]&#34;
<span id="L165" class="ln">   165</span>	if go_highlight_array_whitespace_error != 0
<span id="L166" class="ln">   166</span>	  syn match goSpaceError display &#34;\(\[\]\)\@&lt;=\s\+&#34;
<span id="L167" class="ln">   167</span>	endif
<span id="L168" class="ln">   168</span>	
<span id="L169" class="ln">   169</span>	&#34; Spacing errors around the &#39;chan&#39; keyword
<span id="L170" class="ln">   170</span>	if go_highlight_chan_whitespace_error != 0
<span id="L171" class="ln">   171</span>	  &#34; receive-only annotation on chan type
<span id="L172" class="ln">   172</span>	  syn match goSpaceError display &#34;\(&lt;-\)\@&lt;=\s\+\(chan\&gt;\)\@=&#34;
<span id="L173" class="ln">   173</span>	  &#34; send-only annotation on chan type
<span id="L174" class="ln">   174</span>	  syn match goSpaceError display &#34;\(\&lt;chan\)\@&lt;=\s\+\(&lt;-\)\@=&#34;
<span id="L175" class="ln">   175</span>	  &#34; value-ignoring receives in a few contexts
<span id="L176" class="ln">   176</span>	  syn match goSpaceError display &#34;\(\(^\|[={(,;]\)\s*&lt;-\)\@&lt;=\s\+&#34;
<span id="L177" class="ln">   177</span>	endif
<span id="L178" class="ln">   178</span>	
<span id="L179" class="ln">   179</span>	&#34; Extra types commonly seen
<span id="L180" class="ln">   180</span>	if go_highlight_extra_types != 0
<span id="L181" class="ln">   181</span>	  syn match goExtraType /\&lt;bytes\.\(Buffer\)\&gt;/
<span id="L182" class="ln">   182</span>	  syn match goExtraType /\&lt;io\.\(Reader\|Writer\|ReadWriter\|ReadWriteCloser\)\&gt;/
<span id="L183" class="ln">   183</span>	  syn match goExtraType /\&lt;reflect\.\(Kind\|Type\|Value\)\&gt;/
<span id="L184" class="ln">   184</span>	  syn match goExtraType /\&lt;unsafe\.Pointer\&gt;/
<span id="L185" class="ln">   185</span>	endif
<span id="L186" class="ln">   186</span>	
<span id="L187" class="ln">   187</span>	&#34; Space-tab error
<span id="L188" class="ln">   188</span>	if go_highlight_space_tab_error != 0
<span id="L189" class="ln">   189</span>	  syn match goSpaceError display &#34; \+\t&#34;me=e-1
<span id="L190" class="ln">   190</span>	endif
<span id="L191" class="ln">   191</span>	
<span id="L192" class="ln">   192</span>	&#34; Trailing white space error
<span id="L193" class="ln">   193</span>	if go_highlight_trailing_whitespace_error != 0
<span id="L194" class="ln">   194</span>	  syn match goSpaceError display excludenl &#34;\s\+$&#34;
<span id="L195" class="ln">   195</span>	endif
<span id="L196" class="ln">   196</span>	
<span id="L197" class="ln">   197</span>	hi def link     goExtraType         Type
<span id="L198" class="ln">   198</span>	hi def link     goSpaceError        Error
<span id="L199" class="ln">   199</span>	
<span id="L200" class="ln">   200</span>	&#34; Search backwards for a global declaration to start processing the syntax.
<span id="L201" class="ln">   201</span>	&#34;syn sync match goSync grouphere NONE /^\(const\|var\|type\|func\)\&gt;/
<span id="L202" class="ln">   202</span>	
<span id="L203" class="ln">   203</span>	&#34; There&#39;s a bug in the implementation of grouphere. For now, use the
<span id="L204" class="ln">   204</span>	&#34; following as a more expensive/less precise workaround.
<span id="L205" class="ln">   205</span>	syn sync minlines=500
<span id="L206" class="ln">   206</span>	
<span id="L207" class="ln">   207</span>	let b:current_syntax = &#34;go&#34;
</pre><p><a href="/misc/vim/syntax/go.vim?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.2.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<script type="text/javascript" src="/lib/godoc/playground.js"></script>

<script type="text/javascript" src="/lib/godoc/godocs.js"></script>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
</html>

